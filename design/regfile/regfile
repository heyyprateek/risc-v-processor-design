module regfile (
  input   logic          clk,
  input   logic          reset_n,

  // Source registers
  input   logic [4:0]    rs1_addr_i,
  input   logic [4:0]    rs2_addr_i,

  // Destination register
  input   logic [4:0]    rd_addr_i,
  input   logic          wr_en_i,
  input   logic [31:0]   wr_data_i,

  // Register Data
  output  logic [31:0]   rs1_data_o,
  output  logic [31:0]   rs2_data_o
);


logic [31:0] [31:0] regfile;
  for(genvar i =0;i<32;i++)begin
    logic reg_wr_en;
    assign reg_wr_en = wr_en_i & (i[4:0] == rd_addr_i);
    always@(posedge clk) begin
        if(i == 0)begin
          regfile[i] <= 32'h0;
        end
        else begin
          if(reg_wr_en)begin
          	regfile[i] <= wr_data_i;
        end
      end
    end
  end
  assign rs1_data_o = regfile[rs1_addr_i];
  assign rs2_data_o = regfile[rs2_addr_i];


endmodule
